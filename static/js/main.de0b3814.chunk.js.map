{"version":3,"sources":["constants.js","reducers.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","Card","name","email","id","className","alt","src","CardList","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","hasError","errorInfo","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","PureComponent","Header","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","response","json","data","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.de0b3814.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\"\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload })\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n\tswitch (action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true })\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\trobots: action.payload,\n\t\t\t\tisPending: false\n\t\t\t})\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\terror: action.payload,\n\t\t\t\tisPending: false\n\t\t\t})\n\t\tdefault:\n\t\t\treturn state\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'auto', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, errorInfo) {\n\t\tthis.setState({ hasError: true })\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oooops, Something Going Wrong!</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry","import React, { PureComponent } from 'react';\n\nclass CounterButton extends PureComponent {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcount: 0\n\t\t}\n\t}\n\n\t//below is not needed if we extend PureComponent\n\t//like we have above\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\tif (this.state.count !== nextState.count) {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\n\tupdateCount = () => {\n\t\tthis.setState(state => {\n\t\t\treturn {count: state.count + 1}\n\t\t})\n\t}\n\n\trender() {\n\t\tconsole.log('CounterButton')\n\t\treturn (\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\n\t\t\t\tCount: {this.state.count}\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n\t// shouldComponentUpdate(nextProps, nextState) {\n\t//   return false;\n\t// }\n\n\trender() {\n\t\tconsole.log('Header')\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t<CounterButton color={'red'} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\n\nimport './App.css';\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst { robots, searchField, onSearchChange, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn (\n\t\t\t<div className='tc'>\n\t\t\t\t<Header />\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t{ isPending ? <h1>Loading</h1> :\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t}\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING })\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\"\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\nimport './index.css';\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n\t<Provider store={ store }>\n\t\t<App/>\n\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.register();"],"sourceRoot":""}